import{_ as a,c as n,j as s,a as e,t,a3 as l,o as p,a4 as h}from"./chunks/framework.DgSc8i_W.js";const b=JSON.parse('{"title":"Lor API 0.3.4 版本","description":"","frontmatter":{"title":"Lor API 0.3.4 版本"},"headers":[],"relativePath":"api/034.md","filePath":"api/034.md","lastUpdated":null}'),k={name:"api/034.md"},r={id:"frontmatter-title",tabindex:"-1"},d=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),o=l(`<h2 id="lor" tabindex="-1">lor <a class="header-anchor" href="#lor" aria-label="Permalink to &quot;lor&quot;">​</a></h2><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lor.index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>lor框架暴露出来的最重要对象， 通过调用该对象的方法和属性即可使用绝大部分lor框架提供的功能。</p><h3 id="lor-nbsp" tabindex="-1">lor()   <a class="header-anchor" href="#lor-nbsp" aria-label="Permalink to &quot;lor() &amp;nbsp;&quot;">​</a></h3><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lor.index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>该方法是框架暴露出来的最重要的方法，用于创建一个app对象，之后大部分api将通过<code>app</code>对象展开. 如无特别说明，下文中出现的<code>app</code>均指通过<code>lor()</code>方法创建的application对象.</p><h3 id="lor-router-nbsp" tabindex="-1">lor:Router()   <a class="header-anchor" href="#lor-router-nbsp" aria-label="Permalink to &quot;lor:Router() &amp;nbsp;&quot;">​</a></h3><p>生成一个<code>group router</code>对象，<code>group router</code>对象指一个<code>路由组</code>，用来在业务上聚合一组相关的路由，它具有<code>get</code>、<code>post</code>、<code>delete</code>、<code>put</code>等等HTTP方法，这些API与下文介绍的<code>app</code>上的<code>get</code>、<code>post</code>、<code>delete</code>、<code>put</code>等方法使用方式一致。</p><h2 id="app对象" tabindex="-1">app对象 <a class="header-anchor" href="#app对象" aria-label="Permalink to &quot;app对象&quot;">​</a></h2><p>app对象即为由<code>lor()</code>方法生成的对象， 用它来配置各种参数和路由。</p><h3 id="app-conf-key-value-nbsp" tabindex="-1">app:conf(key, value)   <a class="header-anchor" href="#app-conf-key-value-nbsp" aria-label="Permalink to &quot;app:conf(key, value) &amp;nbsp;&quot;">​</a></h3><p>application配置项，目前主要用于html模板配置，提供一下四个配置项：</p><ul><li>app:conf(&quot;view enable&quot;, true), 开启模板功能，默认为关闭</li><li>app:conf(&quot;view engine&quot;, &quot;tmpl&quot;)， 配置模板引擎，当前lor只支持lua-resty-template，所以这个值暂时固定为&quot;tmpl&quot;</li><li>app:conf(&quot;view ext&quot;, &quot;html&quot;)，模板文件后缀，用户可自由配置</li><li>app:conf(&quot;views&quot;, &quot;./app/views&quot;)，模板文件所在路径</li><li>app:conf(&quot;strict_route&quot;, true)， 是否开启<code>严格路由模式</code>，默认为true, 请参见文档<a href="/lor_site/router/strict_route.106/">路由模式</a></li><li>app:conf(&quot;ignore_case&quot;, true)， 是否忽略uri大小写，默认为true</li><li>app:conf(&quot;max_uri_segments&quot;, true)， 安全参数， 允许的合法uri的分段数</li><li>app:conf(&quot;max_fallback_depth&quot;, true)， 安全参数， 允许的合法路由回溯匹配深度</li></ul><h3 id="app-use-path-middleware-nbsp" tabindex="-1">app:use(path, middleware)   <a class="header-anchor" href="#app-use-path-middleware-nbsp" aria-label="Permalink to &quot;app:use(path, middleware) &amp;nbsp;&quot;">​</a></h3><ul><li><p>app:use用于加载一个插件(middleware)， 针对同一个<code>path</code>可以使用过该API多次来挂载多个middleware</p></li><li><p>参数说明</p><ul><li>path, 插件作用的路径，可以为空，也就是说app:use可以只有一个<code>middleware</code>参数，这时插件作用在所有路由上</li><li>middleware，插件，格式为<code>function(req, res, next) end</code>, 对请求做预处理或者善后处理</li></ul></li><li><p>示例1： 该实例加载了一个作用在所有路由上的插件，它的作用是在请求上注入了一个参数<code>inject_param</code>,这样后续匹配到的路由可以使用这个参数。</p></li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    -- 注入一个参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inject_param</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;from all path middleware&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 注意，如果不调用next()方法，请求到这里就截止了，不在匹配后面的路由</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>示例2： 该实例类似于一个拦截器，app加载了一个作用在前缀为&quot;/user/&quot;路径上的插件。 插件的作用是判断传入的请求参数里是否含有已经被授权的token，没有则直接返回错误，如果有就放过，继续下个路由。</li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">token</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;authorized token&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        -- 注意，这里没有调用next()方法，请求到这里就截止了，不在匹配后面的路由</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;not allowed reqeust&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 满足以上条件，那么继续匹配下一个路由</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="app-erroruse-path-middleware-nbsp" tabindex="-1">app:erroruse(path, middleware)  <a class="header-anchor" href="#app-erroruse-path-middleware-nbsp" aria-label="Permalink to &quot;app:erroruse(path, middleware)&amp;nbsp;&quot;">​</a></h3><ul><li><p>app:erroruse用于加载一个错误处理插件(middleware)</p></li><li><p>参数说明</p><ul><li>path, 插件作用的路径，可以为空，也就是说app:erroruse可以只有一个<code>middleware</code>参数，这时插件作用在所有path上</li><li>middleware，插件，格式为<code>function(err, req, res, next) end</code>, 注意与<code>use</code> api不同的是这个function有4个参数.</li></ul></li><li><p>示例1： 该实例加载了一个作用在所有路径上的插件，也就是说只要有地方发生了错误，并且没有显式地调用<code>response</code>对象的<code>输出</code>方法，则会路由到这个错误插件进行处理。</p></li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 统一错误处理插件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">erroruse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err, req, res, next)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    -- err是错误对象，直接将err打到response，生产环境请勿这样做</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>示例2： 该实例加载了一个作用在前缀为&quot;/user/&quot;路径上的错误插件，也就是以&quot;/user/&quot;开始的请求处理过程中如果发生了错误就会被路由到这里做处理.</li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">erroruse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err, req, res, next)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    -- ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="app-erruse-path-middleware-nbsp" tabindex="-1">app:erruse(path, middleware)   <a class="header-anchor" href="#app-erruse-path-middleware-nbsp" aria-label="Permalink to &quot;app:erruse(path, middleware) &amp;nbsp;&quot;">​</a></h3><p>app:erroruse的别名方法</p><h3 id="app-method-path-func-nbsp" tabindex="-1">app:[METHOD](path, func...)   <a class="header-anchor" href="#app-method-path-func-nbsp" aria-label="Permalink to &quot;app:\\[METHOD\\](path, func...) &amp;nbsp;&quot;">​</a></h3><ul><li><p>目前lor支持的HTTP METHOD方法有get、post、head、options、put、patch、delete、trace，这些方法都可以用类似于<code>app:get(path, fn...)</code>的形式调用。</p></li><li><p>参数说明</p><ul><li>path，有两种格式， <ul><li>纯字符串形式，如&quot;/user/1&quot;,&quot;/foo/bar&quot;</li><li>含有变量的uri， 如&quot;/user/:id&quot;，那么&quot;/user/123&quot;解析后将生成一个变量req.params.id，值为123</li></ul></li><li>func...，对应这个uri的请求处理匿名函数组，其中每个函数的格式为function(req, res, next) end， 也可将它理解为一个通用的lor插件。 具体使用可参考<a href="/lor_site/router/multi_buisiness_middleware.103/">多级处理函数</a></li></ul></li><li><p>常用方法</p><ul><li>app:get(path, func...)</li><li>app:post(path, func...)</li><li>app:put(path, func...)</li><li>app:delete(path, func...)</li></ul></li><li><p>示例:</p></li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 简单使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 前置处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> check_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--①</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error param: name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> check_age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--②</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tonumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error param: age should be larger than 0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> save_user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--③</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;save user:&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user/save&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, check_name, check_age, save_user)</span></span></code></pre></div><h3 id="app-gen-graph" tabindex="-1">app:gen_graph() <a class="header-anchor" href="#app-gen-graph" aria-label="Permalink to &quot;app:gen_graph()&quot;">​</a></h3><p>用于生成当前应用的路由树graph, 此方法应仅在开发时使用。</p><p>示例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>graph TD</span></span>
<span class="line"><span>node-6611((root))</span></span>
<span class="line"><span>node-6611--&gt;node-1144(&lt;center&gt;auth&lt;br/&gt;node-1144&lt;/center&gt;)</span></span>
<span class="line"><span>node-1144--&gt;node-548(&lt;center&gt;login&lt;br/&gt;node-548&lt;/center&gt;)</span></span>
<span class="line"><span>node-1144--&gt;node-1759(&lt;center&gt;logout&lt;br/&gt;node-1759&lt;/center&gt;)</span></span>
<span class="line"><span>node-6611--&gt;node-4724(&lt;center&gt;admin&lt;br/&gt;node-4724&lt;/center&gt;)</span></span>
<span class="line"><span>node-4724--&gt;node-6790(&lt;center&gt;user&lt;br/&gt;node-6790&lt;/center&gt;)</span></span>
<span class="line"><span>node-6790--&gt;node-5751(&lt;center&gt;delete&lt;br/&gt;node-5751&lt;/center&gt;)</span></span>
<span class="line"><span>node-6790--&gt;node-4517(&lt;center&gt;new&lt;br/&gt;node-4517&lt;/center&gt;)</span></span>
<span class="line"><span>node-6790--&gt;node-5967(&lt;center&gt;manage&lt;br/&gt;node-5967&lt;/center&gt;)</span></span>
<span class="line"><span>node-6790--&gt;node-8299(&lt;center&gt;modify&lt;br/&gt;node-8299&lt;/center&gt;)</span></span>
<span class="line"><span>node-4724--&gt;node-6600(&lt;center&gt;users&lt;br/&gt;node-6600&lt;/center&gt;)</span></span>
<span class="line"><span>node-6611--&gt;node-247(&lt;center&gt;*EMPTY*&lt;br/&gt;node-247&lt;/center&gt;)</span></span>
<span class="line"><span>node-6611--&gt;node-496(&lt;center&gt;status&lt;br/&gt;node-496&lt;/center&gt;)</span></span>
<span class="line"><span>node-6611--&gt;node-6265(&lt;center&gt;help&lt;br/&gt;node-6265&lt;/center&gt;)</span></span>
<span class="line"><span>node-6611--&gt;node-1807(&lt;center&gt;machine&lt;br/&gt;node-1807&lt;/center&gt;)</span></span>
<span class="line"><span>node-1807--&gt;node-2555(&lt;center&gt;list&lt;br/&gt;node-2555&lt;/center&gt;)</span></span>
<span class="line"><span>node-1807--&gt;node-3169(&lt;center&gt;*EMPTY*&lt;br/&gt;node-3169&lt;/center&gt;)</span></span>
<span class="line"><span>node-6611--&gt;node-9210(&lt;center&gt;_graph&lt;br/&gt;node-9210&lt;/center&gt;)</span></span></code></pre></div><p>当前项目中路由的可视化图：</p><p><img src="`+h+`" alt=""></p><h3 id="app-run" tabindex="-1">app:run() <a class="header-anchor" href="#app-run" aria-label="Permalink to &quot;app:run()&quot;">​</a></h3><p>启动lor项目，开始接受请求并处理</p><h2 id="group-router" tabindex="-1">group router <a class="header-anchor" href="#group-router" aria-label="Permalink to &quot;group router&quot;">​</a></h2><p>group router(组路由)可以收到一组相关的路由， 可形如<code>local group_router = lor:Router()</code>来初始化， 可通过<code>app:use(&quot;/group_test&quot;, group_router())</code>来加载到<code>app</code>对象里。</p><h3 id="group-router-method-path-func-nbsp" tabindex="-1">group_router:[METHOD](path, func...)   <a class="header-anchor" href="#group-router-method-path-func-nbsp" aria-label="Permalink to &quot;group_router:\\[METHOD\\](path, func...) &amp;nbsp;&quot;">​</a></h3><ul><li><p>目前组路由支持的HTTP METHOD方法有get、post、head、options、put、patch、delete、trace，这些方法都可以用类似于<code>group_router:get(path, fn...)</code>的形式调用。</p></li><li><p>参数说明</p><ul><li>path，有两种格式， <ul><li>纯字符串形式，如&quot;/user/1&quot;,&quot;/foo/bar&quot;</li><li>含有变量的uri， 如&quot;/user/:id&quot;，那么&quot;/user/123&quot;解析后将生成一个变量req.params.id，值为123</li></ul></li><li>func...，对应这个uri的请求处理匿名函数组，其中每个函数的格式为function(req, res, next) end， 也可将它理解为一个通用的lor插件。 具体使用可参考<a href="/lor_site/router/multi_buisiness_middleware.103/">多级处理函数</a></li></ul></li><li><p>常用方法</p><ul><li>group_router:get(path, func...)</li><li>group_router:post(path, func...)</li><li>group_router:put(path, func...)</li><li>group_router:delete(path, func...)</li></ul></li><li><p>示例1: 简单实用</p></li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 简单使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test_router </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test_router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/test/abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test_router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><ul><li>示例2： 挂载多个middleware函数</li></ul><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test_router </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 前置处理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> check_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--①</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error param: name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> check_age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--②</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tonumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error param: age should be larger than 0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> save_user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--③</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;save user:&quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test_router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/save&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {check_name, check_age}, save_user)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test_router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h2 id="request对象" tabindex="-1">request对象 <a class="header-anchor" href="#request对象" aria-label="Permalink to &quot;request对象&quot;">​</a></h2><p>我们注意到有大量的地方出现了形如<code>function(req, res, next) end</code>的函数，这个函数其实就是lor框架的核心机制，也就是lor的常规插件。 其中的<code>req</code>指的就是request对象，它包装了OpenResty收到的HTTP请求参数，并附带了一些方法来完成session、cookie数据交互，路由处理等其他后续操作。</p><p>req的常用属性和方法介绍如下：</p><h3 id="req-path" tabindex="-1">req.path <a class="header-anchor" href="#req-path" aria-label="Permalink to &quot;req.path&quot;">​</a></h3><p>请求的uri，一般用作框架内部使用，如处理路由，解析参数，重定向请求等等，若用户不清楚修改该值会有什么影响，切勿随意更改此值。</p><h3 id="req-query" tabindex="-1">req.query <a class="header-anchor" href="#req-query" aria-label="Permalink to &quot;req.query&quot;">​</a></h3><p>这是一个table，指的是url解析后的query string，比如&quot;/find/user?id=1&amp;name=sumory&amp;year=2016&quot;被解析后会生成对象req.query,它的值为：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sumory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2016&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="req-params" tabindex="-1">req.params <a class="header-anchor" href="#req-params" aria-label="Permalink to &quot;req.params&quot;">​</a></h3><p>这是一个table，指的是url解析后的path variable，比如声明了以下路由处理方法</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/query/:id/book/:name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, res, next)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> req.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">params</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>那么访问&quot;/query/123/book/abc&quot;这个uri时得到的req.params值为:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="req-body" tabindex="-1">req.body <a class="header-anchor" href="#req-body" aria-label="Permalink to &quot;req.body&quot;">​</a></h3><p>这是一个table，指的是form表单提交上来的数据。</p><h3 id="req-is-found-nbsp" tabindex="-1">req:is_found()   <a class="header-anchor" href="#req-is-found-nbsp" aria-label="Permalink to &quot;req:is_found() &amp;nbsp;&quot;">​</a></h3><p>用于判断uri是否被路由到，如果这个方法返回值最终为false，说明<code>404</code>了。</p><h2 id="response对象" tabindex="-1">response对象 <a class="header-anchor" href="#response对象" aria-label="Permalink to &quot;response对象&quot;">​</a></h2><p>reponse对象指的是<code>function(req, res, next) end</code>函数中的res，它包装了OpenResty处理HTTP响应的一些API，并附带了一些方法来完成诸如模板渲染、重定向、json返回、session/cookie处理等其他后续操作。</p><p>res的常用属性和方法介绍如下：</p><h3 id="res-render-view-data-nbsp" tabindex="-1">res:render(view, data)   <a class="header-anchor" href="#res-render-view-data-nbsp" aria-label="Permalink to &quot;res:render(view, data) &amp;nbsp;&quot;">​</a></h3><ul><li>渲染html页面，响应头Content-Type值为text/html; charset=UTF-8</li><li>参数说明 <ul><li>view，模板文件路径，比如app:conf(&quot;views&quot;, &quot;./app/views&quot;)设置了模板路径为./app/views，那么想使用模板文件./app/views/user/index.html时，这个值应为&quot;user/index&quot;</li><li>data，类型为table，指得是模板文件渲染时需要的数据</li></ul></li></ul><h3 id="res-html-content-nbsp" tabindex="-1">res:html(content)   <a class="header-anchor" href="#res-html-content-nbsp" aria-label="Permalink to &quot;res:html(content) &amp;nbsp;&quot;">​</a></h3><ul><li>返回内容为&quot;content&quot;的html，响应头Content-Type值为text/html; charset=UTF-8</li><li>参数说明：content应为字符串类型</li></ul><h3 id="res-json-data-nbsp" tabindex="-1">res:json(data)   <a class="header-anchor" href="#res-json-data-nbsp" aria-label="Permalink to &quot;res:json(data) &amp;nbsp;&quot;">​</a></h3><ul><li>返回内容为json格式，响应头Content-Type值为application/json; charset=utf-8</li><li>参数说明：data格式为lua table</li></ul><h3 id="res-send-text-nbsp" tabindex="-1">res:send(text)   <a class="header-anchor" href="#res-send-text-nbsp" aria-label="Permalink to &quot;res:send(text) &amp;nbsp;&quot;">​</a></h3><ul><li>返回内容为text，响应头Content-Type值为text/plain; charset=UTF-8</li><li>参数说明：text应为字符串、数字或是array等类型</li></ul><h3 id="res-set-header-key-value-nbsp" tabindex="-1">res:set_header(key, value)   <a class="header-anchor" href="#res-set-header-key-value-nbsp" aria-label="Permalink to &quot;res:set_header(key, value) &amp;nbsp;&quot;">​</a></h3><ul><li>设置响应头，即调用<code>ngx.header[key] = value</code></li></ul><h3 id="res-cookie-set-nbsp" tabindex="-1">res.cookie.set(...)   <a class="header-anchor" href="#res-cookie-set-nbsp" aria-label="Permalink to &quot;res.cookie.set(...) &amp;nbsp;&quot;">​</a></h3><ul><li>设置cookie，底层使用lua-resty-cookie库，请自行查看该库参数格式</li><li>参数说明，两种使用方式: <ul><li>res.cookie.set({key = &quot;c2&quot;, value = &quot;c2_value&quot;})</li><li>res.cookie.set(&quot;c1&quot;, &quot;c1_value&quot;)</li></ul></li></ul><h3 id="res-redirect-url-nbsp" tabindex="-1">res:redirect(url)   <a class="header-anchor" href="#res-redirect-url-nbsp" aria-label="Permalink to &quot;res:redirect(url) &amp;nbsp;&quot;">​</a></h3><ul><li>重定向，即调用<code>ngx.redirect(url)</code></li></ul><h2 id="next函数" tabindex="-1">next函数 <a class="header-anchor" href="#next函数" aria-label="Permalink to &quot;next函数&quot;">​</a></h2><p><code>function(req, res, next) end</code>函数中的形参next是lor pipeline式路由能顺利进行的关键，它有两种调用方式：</p><ul><li>不带参数，直接调用next()，则会将请求传给下一个调用者，继续后面的处理</li><li>带参数，如next(&quot;something&quot;)，这时会跳过之后的调用，直接去寻找能匹配的<code>app:erroruse</code>定义的&quot;错误处理插件&quot;</li></ul>`,80);function E(i,g,u,c,y,F){return p(),n("div",null,[s("h1",r,[e(t(i.$frontmatter.title)+" ",1),d]),o])}const C=a(k,[["render",E]]);export{b as __pageData,C as default};
